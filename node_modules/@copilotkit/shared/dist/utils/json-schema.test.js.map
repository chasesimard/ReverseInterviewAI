{"version":3,"sources":["../../src/utils/json-schema.test.ts","../../src/utils/json-schema.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { convertJsonSchemaToZodSchema } from \"../utils/json-schema\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\n\ndescribe(\"convertJsonSchemaToZodSchema\", () => {\n  it(\"should convert a simple JSON schema to a Zod schema\", () => {\n    const jsonSchema = {\n      type: \"object\",\n      properties: {\n        name: { type: \"string\" },\n        age: { type: \"number\" },\n      },\n      required: [\"name\", \"age\"],\n    };\n\n    const expectedSchema = z.object({\n      name: z.string(),\n      age: z.number(),\n    });\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, true);\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n\n  it(\"should convert a JSON schema with nested objects to a Zod schema\", () => {\n    const jsonSchema = {\n      type: \"object\",\n      properties: {\n        name: { type: \"string\" },\n        address: {\n          type: \"object\",\n          properties: {\n            street: { type: \"string\" },\n            city: { type: \"string\" },\n          },\n          required: [\"street\", \"city\"],\n        },\n      },\n      required: [\"name\", \"address\"],\n    };\n\n    const expectedSchema = z.object({\n      name: z.string(),\n      address: z.object({\n        street: z.string(),\n        city: z.string(),\n      }),\n    });\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, true);\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n\n  it(\"should convert a JSON schema with arrays to a Zod schema\", () => {\n    const jsonSchema = {\n      type: \"object\",\n      properties: {\n        names: {\n          type: \"array\",\n          items: { type: \"string\" },\n        },\n      },\n      required: [\"names\"],\n    };\n\n    const expectedSchema = z.object({\n      names: z.array(z.string()),\n    });\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, true);\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n\n  it(\"should convert a JSON schema with optional properties to a Zod schema\", () => {\n    const jsonSchema = {\n      type: \"object\",\n      properties: {\n        name: { type: \"string\" },\n        age: { type: \"number\", required: false },\n      },\n    };\n\n    const expectedSchema = z\n      .object({\n        name: z.string().optional(),\n        age: z.number().optional(),\n      })\n      .optional();\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, false);\n\n    console.log(convertJsonSchemaToZodSchema(jsonSchema, false));\n\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n\n  it(\"should convert a JSON schema with different types to a Zod schema\", () => {\n    const jsonSchema = {\n      type: \"object\",\n      properties: {\n        name: { type: \"string\" },\n        age: { type: \"number\" },\n        isAdmin: { type: \"boolean\" },\n      },\n      required: [\"name\", \"age\", \"isAdmin\"],\n    };\n\n    const expectedSchema = z.object({\n      name: z.string(),\n      age: z.number(),\n      isAdmin: z.boolean(),\n    });\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, true);\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n\n  it(\"should handle edge case where JSON schema has no properties\", () => {\n    const jsonSchema = {\n      type: \"object\",\n    };\n\n    const expectedSchema = z.object({});\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, true);\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n\n  it(\"should handle edge case where JSON schema has no required properties\", () => {\n    const jsonSchema = {\n      type: \"object\",\n      properties: {\n        name: { type: \"string\" },\n        age: { type: \"number\" },\n      },\n    };\n\n    const expectedSchema = z\n      .object({\n        name: z.string().optional(),\n        age: z.number().optional(),\n      })\n      .optional();\n\n    const result = convertJsonSchemaToZodSchema(jsonSchema, false);\n    const resultSchemaJson = zodToJsonSchema(result);\n    const expectedSchemaJson = zodToJsonSchema(expectedSchema);\n\n    expect(resultSchemaJson).toStrictEqual(expectedSchemaJson);\n  });\n});\n","import { z } from \"zod\";\nimport { Parameter } from \"../types\";\n\nexport type JSONSchemaString = {\n  type: \"string\";\n  description?: string;\n  enum?: string[];\n};\n\nexport type JSONSchemaNumber = {\n  type: \"number\";\n  description?: string;\n};\n\nexport type JSONSchemaBoolean = {\n  type: \"boolean\";\n  description?: string;\n};\n\nexport type JSONSchemaObject = {\n  type: \"object\";\n  properties?: Record<string, JSONSchema>;\n  required?: string[];\n  description?: string;\n};\n\nexport type JSONSchemaArray = {\n  type: \"array\";\n  items: JSONSchema;\n  description?: string;\n};\n\nexport type JSONSchema =\n  | JSONSchemaString\n  | JSONSchemaNumber\n  | JSONSchemaBoolean\n  | JSONSchemaObject\n  | JSONSchemaArray;\n\nexport function actionParametersToJsonSchema(actionParameters: Parameter[]): JSONSchema {\n  // Create the parameters object based on the argumentAnnotations\n  let parameters: { [key: string]: any } = {};\n  for (let parameter of actionParameters || []) {\n    parameters[parameter.name] = convertAttribute(parameter);\n  }\n\n  let requiredParameterNames: string[] = [];\n  for (let arg of actionParameters || []) {\n    if (arg.required !== false) {\n      requiredParameterNames.push(arg.name);\n    }\n  }\n\n  // Create the ChatCompletionFunctions object\n  return {\n    type: \"object\",\n    properties: parameters,\n    required: requiredParameterNames,\n  };\n}\n\nfunction convertAttribute(attribute: Parameter): JSONSchema {\n  switch (attribute.type) {\n    case \"string\":\n      return {\n        type: \"string\",\n        description: attribute.description,\n        ...(attribute.enum && { enum: attribute.enum }),\n      };\n    case \"number\":\n    case \"boolean\":\n      return {\n        type: attribute.type,\n        description: attribute.description,\n      };\n    case \"object\":\n    case \"object[]\":\n      const properties = attribute.attributes?.reduce(\n        (acc, attr) => {\n          acc[attr.name] = convertAttribute(attr);\n          return acc;\n        },\n        {} as Record<string, any>,\n      );\n      const required = attribute.attributes\n        ?.filter((attr) => attr.required !== false)\n        .map((attr) => attr.name);\n      if (attribute.type === \"object[]\") {\n        return {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            ...(properties && { properties }),\n            ...(required && required.length > 0 && { required }),\n          },\n          description: attribute.description,\n        };\n      }\n      return {\n        type: \"object\",\n        description: attribute.description,\n        ...(properties && { properties }),\n        ...(required && required.length > 0 && { required }),\n      };\n    default:\n      // Handle arrays of primitive types and undefined attribute.type\n      if (attribute.type?.endsWith(\"[]\")) {\n        const itemType = attribute.type.slice(0, -2);\n        return {\n          type: \"array\",\n          items: { type: itemType as any },\n          description: attribute.description,\n        };\n      }\n      // Fallback for undefined type or any other unexpected type\n      return {\n        type: \"string\",\n        description: attribute.description,\n      };\n  }\n}\n\nexport function convertJsonSchemaToZodSchema(jsonSchema: any, required: boolean): z.ZodSchema {\n  if (jsonSchema.type === \"object\") {\n    const spec: { [key: string]: z.ZodSchema } = {};\n\n    if (!jsonSchema.properties || !Object.keys(jsonSchema.properties).length) {\n      return !required ? z.object(spec).optional() : z.object(spec);\n    }\n\n    for (const [key, value] of Object.entries(jsonSchema.properties)) {\n      spec[key] = convertJsonSchemaToZodSchema(\n        value,\n        jsonSchema.required ? jsonSchema.required.includes(key) : false,\n      );\n    }\n    let schema = z.object(spec).describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"string\") {\n    let schema = z.string().describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"number\") {\n    let schema = z.number().describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"boolean\") {\n    let schema = z.boolean().describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"array\") {\n    let itemSchema = convertJsonSchemaToZodSchema(jsonSchema.items, true);\n    let schema = z.array(itemSchema).describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  }\n  throw new Error(\"Invalid JSON schema\");\n}\n"],"mappings":"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","names":["import_zod"]}